package com.example.project_t2.screens

import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.project_t2.R
import com.example.project_t2.data.GetWeather
import com.example.project_t2.data.WeatherAnalyzer
import com.example.project_t2.data.WeatherData
import com.example.project_t2.graphics.Emotion
import com.example.project_t2.models.Weathers
import com.example.project_t2.roomDB.DiaryEntity
import com.example.project_t2.roomDB.DiaryViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.time.LocalDate
import java.time.LocalDateTime

@Composable
fun DiaryScreen(
    navController: NavController,
    viewModel: DiaryViewModel,
    modifier: Modifier = Modifier
) {
    var title by remember { mutableStateOf("") }
    var content by remember { mutableStateOf("") }
    var selectedEmotion by remember { mutableStateOf<Emotion?>(null) }
    var selectedWeather by remember { mutableStateOf<Weathers?>(null) }
    var weatherDescription by remember { mutableStateOf("ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎî© Ï§ë...") }

    // ÏàòÏ†ï Ïãú Í∏∞Ï°¥ Îã§Ïù¥Ïñ¥Î¶¨Ïùò IDÎ•º Ï†ÄÏû•ÌïòÍ∏∞ ÏúÑÌïú ÏÉÅÌÉú
    var diaryId by remember { mutableStateOf<Int?>(null) }

    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()

    // ÌôîÎ©¥ ÏßÑÏûÖ Ïãú Ïò§Îäò ÎÇ†ÏßúÏùò ÏùºÍ∏∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    LaunchedEffect(Unit) {
        val todayDiary = viewModel.getDiaryByDate(LocalDate.now())
        if (todayDiary != null) {
            // Ïò§Îäò Ïì¥ ÏùºÍ∏∞Í∞Ä ÏûàÏúºÎ©¥, ÌôîÎ©¥ ÏÉÅÌÉúÎ•º Ìï¥Îãπ ÎÇ¥Ïö©ÏúºÎ°ú Ï±ÑÏõÄ
            diaryId = todayDiary.id
            title = todayDiary.title
            content = todayDiary.content
            selectedEmotion = todayDiary.emotion
            selectedWeather = todayDiary.weather
        }

        // ÎÇ†Ïî® Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        withContext(Dispatchers.IO) {
            try {
                val items = GetWeather()
                val sky = items.find { it.category == "SKY" }?.fcstValue?.toIntOrNull()
                val rn1 = items.find { it.category == "RN1" }?.fcstValue?.toDoubleOrNull()
                val t1h = items.find { it.category == "T1H" }?.fcstValue?.toDoubleOrNull()
                val currentWeatherData = WeatherData(sky, rn1, t1h)
                weatherDescription = WeatherAnalyzer.analyze(currentWeatherData)
            } catch (e: Exception) {
                weatherDescription = "ÎÇ†Ïî®Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏñ¥Ïöî."
            }
        }
    }

    Box(modifier = modifier.fillMaxSize()) {
        Image(
            painter = painterResource(id = R.drawable.paper_texture),
            contentDescription = null,
            contentScale = ContentScale.Crop,
            modifier = Modifier.fillMaxSize()
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            DiaryTopAppBar(
                onMenuClick = { /* TODO: Î©îÎâ¥ ÌÅ¥Î¶≠ */ },
                onSaveClick = {
                    coroutineScope.launch {
                        if (selectedWeather == null || selectedEmotion == null) {
                            Toast.makeText(context, "ÎÇ†Ïî®ÏôÄ Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                            return@launch
                        }

                        val diary = DiaryEntity(
                            id = diaryId ?: 0, // idÍ∞Ä ÏûàÏúºÎ©¥ ÏàòÏ†ï, ÏóÜÏúºÎ©¥ 0ÏúºÎ°ú ÏÉà ÏùºÍ∏∞
                            title = title,
                            content = content,
                            emotion = selectedEmotion!!,
                            weather = selectedWeather!!,
                            time = LocalDateTime.now()
                        )

                        if (diaryId != null) {
                            viewModel.updateDiary(diary)
                        } else {
                            viewModel.insertDiary(diary)
                        }
                        navController.popBackStack() // Ï†ÄÏû• ÌõÑ Ïù¥Ï†Ñ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                    }
                }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Ï†úÎ™© ÏûÖÎ†• ÌïÑÎìú
            OutlinedTextField(
                value = title,
                onValueChange = { title = it },
                label = { Text("Ï†úÎ™©") },
                modifier = Modifier.fillMaxWidth(),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = Color.Gray,
                    unfocusedBorderColor = Color.LightGray
                )
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ÎÇ†Ïî® ÏÑ†ÌÉù ÏòÅÏó≠
            WeatherSelector(
                weatherDescription = weatherDescription,
                selectedWeather = selectedWeather,
                onWeatherSelected = { selectedWeather = it }
            )

            Spacer(modifier = Modifier.height(16.dp))


            // Í∞êÏ†ï ÏÑ†ÌÉù ÏòÅÏó≠
            EmotionSelector(
                selectedEmotion = selectedEmotion,
                onEmotionSelected = { selectedEmotion = it }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ÎÇ¥Ïö© ÏûÖÎ†• ÌïÑÎìú
            OutlinedTextField(
                value = content,
                onValueChange = { content = it },
                label = { Text("Ïò§ÎäòÏùò Ïù¥ÏïºÍ∏∞Î•º Îì§Î†§Ï£ºÏÑ∏Ïöî.") },
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f), // ÎÇ®ÏùÄ Í≥µÍ∞ÑÏùÑ Î™®Îëê Ï∞®ÏßÄ
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = Color.Gray,
                    unfocusedBorderColor = Color.LightGray
                )
            )

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@Composable
fun DiaryTopAppBar(onMenuClick: () -> Unit, onSaveClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Image(
            painter = painterResource(id = R.drawable.outline_menu_24),
            contentDescription = "Menu",
            modifier = Modifier
                .size(50.dp)
                .clickable { onMenuClick() }
        )
        Text("ÏùºÍ∏∞ ÏûëÏÑ±", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Image(
            painter = painterResource(id = R.drawable.outline_check_circle_24),
            contentDescription = "Save",
            modifier = Modifier
                .size(50.dp)
                .clickable { onSaveClick() }
        )
    }
}

@Composable
fun WeatherSelector(
    weatherDescription: String,
    selectedWeather: Weathers?,
    onWeatherSelected: (Weathers) -> Unit
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Ïò§ÎäòÏùò ÎÇ†Ïî®: $weatherDescription", fontWeight = FontWeight.SemiBold)
        Spacer(modifier = Modifier.height(8.dp))
        Row(
            modifier = Modifier
                .fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceAround
        ) {
            Weathers.values().forEach { weather ->
                val isSelected = weather == selectedWeather
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .clip(CircleShape)
                        .background(if (isSelected) Color.LightGray.copy(alpha = 0.5f) else Color.Transparent)
                        .clickable { onWeatherSelected(weather) },
                    contentAlignment = Alignment.Center
                ) {
                    // TODO: Í∞Å ÎÇ†Ïî®Ïóê ÎßûÎäî ÏïÑÏù¥ÏΩòÏúºÎ°ú ÍµêÏ≤¥ÌïòÎ©¥ Îçî Ï¢ãÏäµÎãàÎã§.
                    Text(text = weatherToEmoji(weather), fontSize = 30.sp)
                }
            }
        }
    }
}

// ÏûÑÏãúÎ°ú ÎÇ†Ïî®Î•º Ïù¥Î™®ÏßÄÎ°ú ÌëúÌòÑÌïòÎäî Ìï®Ïàò
fun weatherToEmoji(weather: Weathers): String {
    return when (weather) {
        Weathers.SUNNY -> "‚òÄÔ∏è"
        Weathers.CLOUDY -> "‚òÅÔ∏è"
        Weathers.PARTLY_CLOUDY -> "‚õÖ"
        Weathers.RAINY -> "üåßÔ∏è"
        Weathers.SNOWY -> "üå®Ô∏è"
        Weathers.STORMY -> "‚õàÔ∏è"
        Weathers.FOGGY -> "üå´Ô∏è"
        Weathers.WINDY -> "üå¨Ô∏è"
        Weathers.HAZY -> "üò∂‚Äçüå´Ô∏è"
    }
}


@Composable
fun EmotionSelector(selectedEmotion: Emotion?, onEmotionSelected: (Emotion) -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceAround
    ) {
        Emotion.values().forEach { emotion ->
            val isSelected = emotion == selectedEmotion
            Box(
                modifier = Modifier
                    .size(50.dp)
                    .clip(CircleShape)
                    .background(if (isSelected) Color.LightGray.copy(alpha = 0.5f) else Color.Transparent)
                    .clickable { onEmotionSelected(emotion) },
                contentAlignment = Alignment.Center
            ) {
                Text(text = emotion.emoji, fontSize = 32.sp)
            }
        }
    }
}

